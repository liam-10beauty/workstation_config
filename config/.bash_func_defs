#!/usr/bin/zsh
# ~/.bash_func_defs
# trap 'echo "sourced bash_func_defs again at $(date) by $$"' DEBUG

isfile() {
	for __f_name in "$@"; do
		test -f "$__f_name" && echo "+++ $__f_name exists. +++" || echo "--- $__f_name does not exist. ---"
	done
}

isdir() {
	for __dir_name in "$@"; do
		test -d "$__dir_name" && echo "+++ $__dir_name exists. +++" || echo "--- $__dir_name does not exist. ---"
	done
}

search-help-options() {
	if [[ $# -lt 3 ]]; then
		echo -e "usage: check-options <FUNC> <HELP_FLAG> <SHORT-OPTS>\n
        If you have a list of short options that are used for a function and want to know what they do:\n
        \tfunc [FUNC]      - function of interest
        \thelp [HELP_FLAG] - the flag that shows the function's help.
        \t[...]            - options as a concatenated sequence.\n"
		return 0
	fi

	local _func=$1
	local _help_flag=$2
	local _opts=$3

	echo "_func:$_func"
	echo "_help_flag:$_help_flag"
	echo "_opts:$_opts"

	# Check if command exists
	if ! command -v "$_func" &>/dev/null; then
		echo "Command $_func could not be found"
		return 1
	fi

	if ! "$_func" "$_help_flag" &>/dev/null; then
		echo "Trying man..."
		man "$_func" 2>&1 | egrep -n '^\s+(-['"$_opts"']){1,1}.*'
	else
		# Get the help output, then grep for the options
		$_func "$_help_flag" 2>&1 | egrep '^\s+(-['"$_opts"']){1,1}.*'
	fi
}

function test-pyqt-import() {
	if [[ $# -gt 0 ]]; then
		while [[ $CONDA_SHLVL -gt 0 ]]; do
			conda deactivate
		done
		conda activate "$1"
	else
		conda activate
	fi
	python -c "from PyQt5.QtCore import Qt" 2>/tmp/pyqt_err

	if [[ $? -ne 0 ]]; then
		echo -e "Python import in $1 environment failed with the following error:\n"
		cat /tmp/pyqt_err
		while [[ $CONDA_SHLVL -gt 0 ]]; do
			conda deactivate
		done
	else
		echo "Python import was successful!"
	fi
}

### Hydra convenience start:
function py() { python "$@" "+setup=$TEN_B_RIG_NAME"; }

fzf-delta() {
	fzf --multi=2 \
		--preview 'delta {+} --width=${FZF_PREVIEW_COLUMNS} || echo "Select 2 files using TAB"' \
		--preview-window '~3'
	# --preview "([ ! -s $temp_file ] && echo 'Select a file using TAB') || (diff -u $temp_file {} || true)"
}

### Conda environment activation:
fzf-conda-activate() {
	choice=(
		"$(
			conda env list |
				sed 's/\*/ /;1,2d' |
				xargs -I {} bash -c '
                name_path=( {} );
                py_version=( $(${name_path[1]}/bin/python --version) );
                echo ${name_path[0]} ${py_version[1]} ${name_path[1]}
            ' |
				column -t |
				fzf --info=inline \
					--border=rounded \
					--bind "alt-d:reload()+change-preview()" \
					--preview-window="right:50%" \
					--preview-label=" environment packages " \
					--preview=$'
                    conda list -n {1} | sort
                '
		)"
	)
	[[ -z "$choice" ]] && return 0
	choice="$(echo ${choice} | awk {'print $3'})" || return 1
	conda activate ${choice}
}
condaa() {
	if [[ $# -gt 0 ]]; then
		conda activate "$1"
	else
		zle
		fzf-conda-activate && return 0
	fi
}

### Conda environment deactivation:
condad() {
	conda deactivate
}

function fman() {
	if [[ $# -eq 0 ]]; then
		zle
		fzf-man-widget
	else
		man $1
	fi
}
function fenv() {
	env | fzf --preview "echo {} | cut -d'=' -f2" \
		--bind "enter:execute(echo {} | tr -d '\n' | pbcopy)"
}

function reset-path() {
	if [[ $# -eq 0 ]]; then
		echo "No variable name provided. Resetting PATH to DEFAULT_PATH $($DEFAULT_PATH | tr ':' '\n')."
		temp_env_var="DEFAULT_PATH"
	else
		echo "Resetting $1 to DEFAULT_PATH ($($DEFAULT_PATH | tr ':' '\n'))."
		temp_env_var=$1
	fi
	source "$HOME/.bash_profile"
	if [[ -z $temp_env_var ]]; then
		read -p "Either environment variable not specified or was not found. Exitting in 5sec..." -t 1
		echo
		for i in 5 4 3 2 1; do
			echo "Exiting in $i seconds..."
			sleep 1
		done
	fi
}

function clean-path-var() {
	local search_string="python"
	local path_list="$PATH"

	if [[ $path_list != *"$search_string"* ]]; then
		if [[ -z $PATH ]]; then
			export PATH=$DEFAULT_PATH
		fi
		export PATH=$PATH:$PYTHON_PATH:$CONDA_PATH
	fi

	local input_var="$1"

	if [[ -z $input_var ]]; then
		input_var="PATH"
	fi
	python3 ~/clean_path_var.py -n "$input_var"
}

function upper() {
	echo "$1" | tr '[:lower:]' '[:upper:]'
}

function lower() {
	echo "$1" | tr '[:upper:]' '[:lower:]'
}

function sandbox() {
	local tmpdir="$(mktemp -d -t sandbox-$(date +%Y-%m-%d-%H-%M-%S)-XXXXXX)"

	if [[ -z $tmpdir ]]; then
		echo "Failed to create temporary directory."
		return 1
	else
		echo "Created temporary directory: $tmpdir"
		cd "$tmpdir" || return 1
	fi
	code "$tmpdir"
}

if [[ -n $ZSH_VERSION ]]; then
	fzf-man-widget() {
		batman="man {1} | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
		man -k . | sort |
			awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' |
			fzf \
				-q "$1" \
				--ansi \
				--tiebreak=begin \
				--prompt=' Man > ' \
				--preview-window '50%,rounded,<50(up,85%,border-bottom)' \
				--preview "${batman}" \
				--bind "enter:execute(man {1})" \
				--bind "alt-c:+change-preview(cht.sh {1})+change-prompt(ﯽ Cheat > )" \
				--bind "alt-m:+change-preview(${batman})+change-prompt( Man > )" \
				--bind "alt-t:+change-preview(tldr {1})+change-prompt(ﳁ TLDR > )"
		zle reset-prompt
	}
	# `Ctrl-H` keybinding to launch the widget (this widget works only on zsh, don't know how to do it on bash and fish
	# (additionaly pressing`ctrl-backspace` will trigger the widget to be executed too because both share the same keycode)
	bindkey '^h' fzf-man-widget
	zle -N fzf-man-widget
	# Icon used is nerdfont
fi

function get_color_code() {
	local str="$1"
	local hash=0
	for ((i = 0; i < ${#str}; i++)); do
		char="${str:$i:1}"
		ord=$(printf '%d' "'$char")
		hash=$(((hash * 31 + ord) % 7 + 31))
	done
	echo "$hash"
}

function cdd() {
	builtin cd
}

function cd() {
	if [[ "$#" != 0 ]]; then
		builtin cd "$@"
		return
	fi

	while true; do
		local lsd=".."$'\n'"$(ls -pAFG --color=always | grep '/$' | sed 's;/$;;')"
		IFS=$'\n' read -d "${IFS}" -A dirArray <<<"${lsd}"

		# --bind='left:execute(cd ..)' --bind='right:execute(cd {})'
		local dir=$(
			for dir_entry in "${dirArray[@]}"; do
				color=$(get_color_code "${dir_entry}")
				printf $'\033['"%s"$'\033[0m\n' "${color}m${dir_entry}"
			done | fzf --reverse --preview '
				__cd_nxt=$(echo {});
				__cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
				echo ${__cd_path};
				echo;
				ls -pAFG --color=always ${__cd_path};
			'
		)
		[[ ${#dir} != 0 ]] || return 0
		builtin cd "$dir" &>"/dev/null"
	done
}

function lf() {
	if [[ "$#" != 0 ]]; then
		builtin ls -AFG "$@"
		return
	fi
	while true; do
		local lsd=$(echo ".." && ls -AFG | grep '/$' | sed 's;/$;;')
		local dir="$(printf '%s\n' "${lsd[@]}" |
			fzf --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
				ls -lAF --color=always "${__cd_path}";
        ')"
		[[ ${#dir} != 0 ]] || return 0
		builtin cd "${dir}" &>"/dev/null" && builtin ls -lAF --color=always "${dir}"
	done
}
